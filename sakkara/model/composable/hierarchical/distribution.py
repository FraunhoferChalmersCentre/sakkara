from abc import ABC
from typing import Callable, Optional, Union, Tuple, Any, Iterable

from sakkara.model.base import ModelComponent
from sakkara.model.composable.base import T
from sakkara.model.fixed.base import FixedValueComponent
from sakkara.model.composable.hierarchical.base import HierarchicalComponent


class DistributionComponent(HierarchicalComponent[T], ABC):
    """
    Class for components whose variable is generated by a PyMC distribution
    """

    def __init__(self, generator: Callable, name: Optional[str] = None, group: Union[str, Tuple[str, ...]] = 'global',
                 members: Optional[Iterable[Any]] = None, **subcomponents: Any):
        """

        Parameters
        ----------
        generator: PyMC callable for distribution to use.
        name: Name of the corresponding variable to register in PyMC.
        group: Group of which the component is defined for.
        members: Subset of members of column the component is defined for.
        subcomponents: Underlying ModelComponent objects, key needs to correspond to keyword in PyMC callable.
        """
        super().__init__(name, group, members,
                         subcomponents={k: v if isinstance(v, ModelComponent) else FixedValueComponent(v) for k, v in
                                        subcomponents.items()})
        self.generator = generator

    def build_variable(self) -> None:
        self.variable = self.generator(self.name, **self.get_built_components(), shape=self.node.get_members().shape,
                                       dims=self.dims())
